<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.bbut.iy.itemmaster.dao.StocktakeEntryMapper" >

    <resultMap id="BaseItemResult" type="cn.com.bbut.iy.itemmaster.dto.pi0100.StocktakeItemDTO">
        <result column="article_id" property="articleId"></result>
        <result column="article_name" property="articleName"></result>
        <result column="effective_start_date" property="effectiveStartDate"></result>
        <result column="effective_end_date" property="effectiveEndDate"></result>
        <result column="barcode" property="barcode"></result>
        <result column="sales_unit_id" property="uom"></result>
        <result column="spec" property="spec"></result>
        <result column="first_qty" property="firstQty"></result>
        <result column="second_qty" property="secondQty"></result>

        <result column="bad_qty" property="badQty"></result>
        <result column="variance_qty" property="varianceQty"></result>
        <result column="c_qty" property="cQty"></result>
        <result column="c_qty1" property="cQty1"></result>
        <result column="c_qty2" property="cQty2"></result>
        <result column="real_time_qty" property="realTimeQty"></result>
        <result column="sale_qty_total" property="saleQtyTotal"></result>
        <result column="customer_return_qty_total" property="customerReturnQtyTotal"></result>
        <result column="scrap_qty" property="scrapQty"></result>
        <result column="allocation_qty_reduce" property="allocationQtyReduce"></result>
        <result column="allocation_qty_add" property="allocationQtyAdd"></result>
        <result column="receive_total_qty" property="receiveTotalQty"></result>
        <result column="store_return_qty" property="storeReturnQty"></result>
        <result column="stocktake_time" property="stocktakeTime"></result>
    </resultMap>

    <resultMap id="BaseResultMap" type="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0100DTO">
        <result column="pi_date" property="piDate"></result>
        <result column="pi_cd" property="piCd"></result>
        <result column="pi_start_time" property="piStartTime"></result>
        <result column="pi_end_time" property="piEndTime"></result>
        <result column="store_cd" property="storeCd"></result>
        <result column="store_name" property="storeName"></result>
        <result column="pi_status" property="piStatus"></result>
        <result column="pi_type" property="piType"></result>
        <result column="pi_status_code" property="piStatusCode"></result>
        <result column="pi_type_code" property="piTypeCode"></result>
        <result column="pi_method" property="piMethod"></result>
        <result column="review_status" property="reviewStatus"></result>
        <result column="remarks" property="remarks"></result>
        <result column="create_user_id" property="createUserId"></result>
        <result column="create_ymd" property="createYmd"></result>
        <result column="update_user_id" property="updateUserId"></result>
        <result column="export_flg" property="exportFlg"></result>
    </resultMap>

    <delete id="deleteTempTable">
        DROP TABLE IF EXISTS ${tableName};
    </delete>

    <select id="getTempItemList" resultType="cn.com.bbut.iy.itemmaster.dto.pi0100.StocktakeItemDTO">
        SELECT
            t1.article_id AS articleId,
            t1.article_name AS articleName,
            t1.bad_qty AS badQty,
            t1.pi_qty AS firstQty,
            t1.stocktake_time AS stocktakeTime,
            t2.spec,
            t2.sales_unit_id AS uom,
            t3.default_barcode barcode
        FROM
            ${tableName} t1,
            ma1100 t2,
            ma2240 ma22,
            ma1110 t3
        WHERE
            t2.article_id = t1.article_id
            AND #{businessDate} BETWEEN t2.effective_start_date AND t2.effective_end_date
            AND ma22.article_id = t1.article_id
            AND ma22.store_cd = #{storeCd,jdbcType=VARCHAR}
            AND ma22.vendor_id = t3.vendor_id
            AND t3.article_id = t2.article_id
            and #{businessDate} between t3.effective_start_date and t3.effective_end_date
            AND t3.structure_cd = (SELECT ma2.admin_structure_cd FROM ma0020 ma2 WHERE ma2.structure_cd =
            (SELECT ma1.admin_structure_cd FROM ma0020 ma1 WHERE ma1.structure_cd = #{storeCd,jdbcType=VARCHAR}))
    </select>

    <select id="countOldItem" resultType="int">
        SELECT count(*)
        FROM
            ma1100
        WHERE
             article_id = #{articleId} AND #{businessDate} BETWEEN effective_start_date AND effective_end_date
    </select>

    <insert id="saveToTempTable" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.StocktakeItemDTO">
        INSERT INTO ${tableName}
        VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (
            #{item.articleId,jdbcType=VARCHAR},
            #{item.articleName,jdbcType=VARCHAR},
            #{item.badQty,jdbcType=VARCHAR},
            #{item.firstQty,jdbcType=VARCHAR},
            #{item.stocktakeTime,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <update id="createTempTable">
        create temporary table ${tableName} (
            article_id varchar(255),
            article_name varchar(255),
            bad_qty varchar(255),
            pi_qty varchar(255),
            stocktake_time varchar(255)
        )
    </update>

    <update id="createTxtTempTable">
        create temporary table ${tableName} (
            article_id varchar(255),
            article_name varchar(255),
            barcode varchar(255),
            unit varchar(255),
            bad_qty varchar(255),
            pi_qty varchar(255),
            stocktake_time varchar(255)
        )
    </update>

    <insert id="saveToTxtTempTable" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.StocktakeItemDTO">
        INSERT INTO ${tableName}
        VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (
            #{item.articleId,jdbcType=VARCHAR},
            #{item.articleName,jdbcType=VARCHAR},
            #{item.barcode,jdbcType=VARCHAR},
            #{item.uom,jdbcType=VARCHAR},
            #{item.badQty,jdbcType=VARCHAR},
            #{item.firstQty,jdbcType=VARCHAR},
            #{item.stocktakeTime,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <select id="getTempTxtItemList" resultType="cn.com.bbut.iy.itemmaster.dto.pi0100.StocktakeItemDTO">
        SELECT
            t1.article_id AS articleId,
            t1.article_name AS articleName,
            t1.barcode AS barcode,
            t1.unit AS uom,
            t1.bad_qty AS badQty,
            t1.pi_qty AS firstQty,
            t1.stocktake_time AS stocktakeTime,
            t2.spec
        FROM
            ${tableName} t1,
            ma1100 t2
        WHERE
            t2.article_id = t1.article_id
            AND #{businessDate} BETWEEN t2.effective_start_date AND t2.effective_end_date
    </select>

    <select id="selectCountByParam" resultType="int" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0100ParamDTO">
        SELECT
        count(p.pi_date)
        FROM
        pi0100 p LEFT JOIN MA4200 oper ON oper.emp_num_id = p.create_user_id,
        ma1000 p1,
        cm9060 p2,
        (SELECT c.code_value,c.code_name FROM CM9010 C WHERE C.code_type = '00510' AND C.effective_sts = '10') C1,
        (SELECT c.code_value,c.code_name FROM CM9010 C WHERE C.code_type = '00530' AND C.effective_sts = '10') C2,
        pi0105 p3
        <where>
            p2.sp_id = '0000'
            and p.store_cd = p1.store_cd
            and p2.sp_value BETWEEN p1.effective_start_date and p1.effective_end_date
            and p.pi_status = c2.code_value
            and p.pi_type = c1.code_value
            AND p3.pi_cd = p.pi_cd
            AND p3.review_status = '10'
            and P.store_cd IN
            <foreach item="store" index="index" collection="pi0100Param.stores"
                     open="(" separator="," close=")">
                #{store,jdbcType=VARCHAR}
            </foreach>
            <if test="pi0100Param.piCd != null and pi0100Param.piCd != ''">
                AND lower(p.pi_cd) like lower(CONCAT('%',#{pi0100Param.piCd},'%'))
            </if>
            <if test="pi0100Param.piStatus != null and pi0100Param.piStatus != ''">
                and P.pi_status = #{pi0100Param.piStatus}
            </if>
            <if test="pi0100Param.piStartDate!=null and pi0100Param.piStartDate!='' and pi0100Param.piEndDate!=null and pi0100Param.piEndDate!=''">
                and P.pi_date BETWEEN #{pi0100Param.piStartDate} AND #{pi0100Param.piEndDate}
            </if>
        </where>
    </select>

    <select id="search" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0100ParamDTO" resultMap="BaseResultMap">
        SELECT
        p.pi_date,
        p.pi_cd,
        p.pi_start_time,
        p.pi_end_time,
        p1.store_cd,
        p1.store_name,
        p.pi_status as pi_status_code,
        p.pi_type as pi_type_code,
        c2.code_name as pi_status,
        c1.code_name as pi_type,
        p.review_status,
        p.remarks,
        p.export_flg,
        oper.emp_name as create_user_id,
        CONCAT(P.create_ymd,P.create_hms) as create_ymd
        FROM
        pi0100 p LEFT JOIN MA4200 oper ON oper.emp_num_id = p.create_user_id,
        ma1000 p1,
        cm9060 p2,
        (SELECT c.code_value,c.code_name FROM CM9010 C WHERE C.code_type = '00510' AND C.effective_sts = '10') C1,
        (SELECT c.code_value,c.code_name FROM CM9010 C WHERE C.code_type = '00530' AND C.effective_sts = '10') C2,
        pi0105 p3
        <where>
            p2.sp_id = '0000'
            and p.store_cd = p1.store_cd
            and p2.sp_value BETWEEN p1.effective_start_date and p1.effective_end_date
            and p.pi_status = c2.code_value
            and p.pi_type = c1.code_value
            AND p3.pi_cd = p.pi_cd
            AND p3.review_status = '10'
            and P.store_cd IN
            <foreach item="store" index="index" collection="pi0100Param.stores"
                     open="(" separator="," close=")">
                #{store,jdbcType=VARCHAR}
            </foreach>
            <if test="pi0100Param.piCd != null and pi0100Param.piCd != ''">
                AND lower(p.pi_cd) like lower(CONCAT('%',#{pi0100Param.piCd},'%'))
            </if>
            <if test="pi0100Param.piStatus != null and pi0100Param.piStatus != ''">
                and P.pi_status = #{pi0100Param.piStatus}
            </if>
            <if test="pi0100Param.piStartDate!=null and pi0100Param.piStartDate!='' and pi0100Param.piEndDate!=null and pi0100Param.piEndDate!=''">
                and P.pi_date BETWEEN #{pi0100Param.piStartDate} AND #{pi0100Param.piEndDate}
            </if>
        </where>
        ORDER BY P.pi_date DESC
        <if test="pi0100Param.flg">
            LIMIT ${pi0100Param.rows} OFFSET ${pi0100Param.limitStart}
        </if>
    </select>

    <update id="updateStocktakingVarianceReport">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            UPDATE pi0125
            <set >
                <if test="item.cQty != null" >
                    c_qty = #{item.cQty},
                </if>
                <if test="item.secondQty != null" >
                    pi_qty = CAST (#{item.secondQty} AS NUMERIC),
                </if>
                <if test="item.lastVarianceQty != null" >
                    last_variance_qty = #{item.lastVarianceQty},
                </if>
                <if test="item.varianceQty != null" >
                    variance_qty = #{item.varianceQty},
                </if>
                <if test="item.exportTime != null" >
                    pi_end_time = #{item.exportTime},
                </if>
            </set>
            where
                pi_cd = #{item.piCd}
                AND pi_date = #{item.piDate}
                AND store_cd = #{item.storeCd}
                AND article_id = #{item.articleId}
        </foreach>
    </update>

    <update id="updatePi0125">
        UPDATE PI0125
            SET pi_qty = NULL ,
            variance_qty = NULL
        WHERE
            article_id IN (
            SELECT DISTINCT
                A.article_id
            FROM
                PI0125 A
            WHERE
                A.pi_cd = #{piCd}
                AND A.pi_date = #{piDate}
                AND A.store_cd = #{storeCd}
                AND A.article_id NOT IN (
                    SELECT
                        article_id
                    FROM
                        PI0120
                    WHERE
                        pi_cd = #{piCd}
                        AND pi_date = #{piDate}
                        AND store_cd = #{storeCd}
                    )
            )
            AND pi_cd = #{piCd}
            AND pi_date = #{piDate}
            AND store_cd = #{storeCd}
    </update>

    <select id="getItemVarianceReport" resultMap="BaseItemResult">
        SELECT
            pi1.pi_cd,
            pi1.pi_date,
            pi1.store_cd,
            pi1.article_id,
            pi1.real_time_qty,
            pi1.c_qty,
            pi1.variance_qty,
            sa3.bad_qty,
            COALESCE(sa3.first_qty,0)+COALESCE(sa3.second_qty,0) second_qty,
            /*CASE WHEN sa3.second_qty IS NOT NULL THEN sa3.second_qty ELSE sa3.first_qty END second_qty,*/
            COALESCE(sa3.sale_qty_total,0) AS sale_qty_total
        FROM
            pi0125 pi1 LEFT JOIN
            (SELECT pi.pi_cd,pi.pi_date,pi.article_id,pi.store_cd,pi.first_qty,
                pi.bad_qty,pi.second_qty,SUM(sa.sale_qty) AS sale_qty_total
            FROM pi0120 pi LEFT JOIN pi0100 pi2 ON pi.pi_cd = pi2.pi_cd AND pi.store_cd = pi2.store_cd
                AND pi.pi_date = pi2.pi_date LEFT JOIN sa0020 sa ON pi.store_cd = sa.store_cd AND sa.detail_type = 's'
                AND sa.article_id = pi.article_id AND to_char(sa.sale_date,'yyyymmddhh24miss') BETWEEN pi2.export_time AND pi.stocktake_time
            WHERE pi.pi_cd = #{piCd} AND pi.pi_date = #{piDate} AND pi.store_cd = #{storeCd}
            GROUP BY pi.pi_cd, pi.pi_date, pi.article_id, pi.store_cd, pi.first_qty, pi.second_qty,pi.bad_qty
			) sa3 ON pi1.pi_cd = sa3.pi_cd and pi1.store_cd = sa3.store_cd and pi1.article_id = sa3.article_id
        WHERE
            pi1.pi_cd = #{piCd}
            AND pi1.pi_date = #{piDate}
            AND pi1.store_cd = #{storeCd}
    </select>

    <update id="updateMainStatus" parameterType="java.lang.String">
        UPDATE
            pi0100
        SET
            pi_status = #{status}
        WHERE
            pi_cd = #{piCd}
            and pi_date = #{piDate}
    </update>

    <select id="getItemInfo" parameterType="java.lang.String" resultMap="BaseItemResult">
        SELECT
            T.*,
            T1.barcode,
            T2.unit_name
        FROM
            ( SELECT * FROM ma1100 WHERE article_id = #{itemCode} AND (SELECT C.sp_value FROM CM9060 C WHERE C.sp_id = '0000')
            BETWEEN effective_start_date AND effective_end_date ) T
            LEFT JOIN ( SELECT article_id, effective_start_date, barcode FROM ma1140 WHERE is_default = '1' ) T1
            ON T.article_id = T1.article_id AND T.effective_start_date = T1.effective_start_date
            LEFT JOIN ( SELECT unit_id, unit_name FROM ma0220 ) T2 ON T.sales_unit_id = T2.unit_id
        WHERE
            T.pma_cd IN (SELECT P2.pma_cd FROM PI0100 P1, PI0110 P2 WHERE P1.pi_cd = #{piCd} AND P1.pi_date=#{piDate} AND P1.pi_cd = P2.pi_cd)
        ORDER BY T.effective_start_date DESC
	    LIMIT 1
    </select>

    <select id="getItemList" parameterType="java.lang.String" resultType="cn.com.bbut.iy.itemmaster.dto.base.AutoCompleteDTO">
        SELECT
            A.article_id k,
            concat(A.article_id,' ',A.article_name) v
        FROM
            ma1100 A,
            CM9060 B,
            PI0110 C,
            SK0000_today D
        WHERE
            B.sp_id = '0000'
            AND B.sp_value BETWEEN A.effective_start_date AND A.effective_end_date
            AND C.pi_cd = #{piCd,jdbcType=VARCHAR}
            AND C.pi_date = #{piDate,jdbcType=VARCHAR}
            AND A.pma_cd = C.pma_cd
            AND B.sp_value = D.effective_date
            AND A.article_id = D.article_id
            AND D.store_cd = #{piStoreCd,jdbcType=VARCHAR}
            <if test="v!=null and v!=''">
                AND (
                lower(A.article_id) like lower(CONCAT('%',#{v,jdbcType=VARCHAR},'%'))
                OR lower(A.article_name) like lower(CONCAT('%',#{v,jdbcType=VARCHAR},'%'))
                )
            </if>
    </select>

    <select id="getItemInfoByList" parameterType="java.lang.String" resultMap="BaseItemResult">
        SELECT
        T.*,
        T1.barcode,
        T2.unit_name
        FROM
        ( SELECT * FROM ma1100 WHERE
        1=1
        <if test="idList!=null and idList.size()>0">
            and article_id in
            <foreach collection="idList" item="articleId" index="index" open="(" separator="," close=")">
                #{articleId}
            </foreach>
        </if>
        AND (SELECT C.sp_value FROM CM9060 C WHERE C.sp_id = '0000')
        BETWEEN effective_start_date AND effective_end_date ) T
        LEFT JOIN ( SELECT article_id, effective_start_date, barcode FROM ma1140 WHERE is_default = '1' ) T1
        ON T.article_id = T1.article_id AND T.effective_start_date = T1.effective_start_date
        LEFT JOIN ( SELECT unit_id, unit_name FROM ma0220 ) T2 ON T.sales_unit_id = T2.unit_id
        WHERE
        T.pma_cd IN (SELECT P2.pma_cd FROM PI0100 P1, PI0110 P2 WHERE P1.pi_cd = #{piCd} AND P1.pi_date=#{piDate} AND P1.pi_cd = P2.pi_cd)
        ORDER BY T.effective_start_date DESC
    </select>

    <select id="getCountByPicd" resultType="int">
        SELECT COUNT(P.PI_CD) FROM PI0120 P WHERE P.PI_CD = #{piCd} AND P.PI_DATE = #{piDate}
    </select>

    <delete id="deleteByPicd">
        DELETE FROM PI0120 WHERE PI_CD = #{piCd} AND PI_DATE = #{piDate}
    </delete>

    <insert id="save" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.StocktakeItemDTO">
        INSERT INTO PI0120 (
        pi_cd,
        pi_date,
        store_cd,
        article_id,
        barcode,
        sales_unit_id,
        spec,
        bad_qty,
        first_qty,
        second_qty,
        pi_qty_status,
        stocktake_time
        ) VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (
            #{item.piCd,jdbcType=VARCHAR},
            #{item.piDate,jdbcType=VARCHAR},
            #{item.storeCd,jdbcType=VARCHAR},
            #{item.articleId,jdbcType=VARCHAR},
            #{item.barcode,jdbcType=VARCHAR},
            #{item.uom,jdbcType=VARCHAR},
            #{item.spec,jdbcType=VARCHAR},
            <if test="item.badQty != null and item.badQty != ''">
                CAST (#{item.badQty,jdbcType=VARCHAR} AS numeric),
            </if>
            <if test="item.badQty == null or item.badQty == ''">
                null,
            </if>
            <if test="item.firstQty != null and item.firstQty != ''">
                CAST (#{item.firstQty,jdbcType=VARCHAR} AS numeric),
            </if>
            <if test="item.firstQty == null or item.firstQty == ''">
                null,
            </if>
            <if test="item.secondQty != null and item.secondQty != ''">
                CAST (#{item.secondQty,jdbcType=VARCHAR} AS numeric),
            </if>
            <if test="item.secondQty == null or item.secondQty == ''">
                null,
            </if>
            '0',
            #{item.stocktakeTime,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <select id="getPI0120ByPrimary" resultMap="BaseItemResult">
        SELECT
            P1.pi_cd,
            P1.pi_date,
            P1.barcode,
            P1.store_cd,
            M1.article_id,
            M1.article_name,
            M1.spec,
            P1.bad_qty,
            M1.sales_unit_id,
            P1.first_qty,
            P1.second_qty,
            P1.stocktake_time
        FROM
            PI0120 P1,
            MA1100 M1,
            CM9060 C1
        WHERE
            P1.pi_cd = #{piCd}
            AND P1.pi_date = #{piDate}
            AND C1.sp_id = '0000'
            AND P1.article_id = M1.article_id
            AND P1.pi_qty_status = '0'
            AND C1.sp_value BETWEEN M1.effective_start_date
            AND M1.effective_end_date
        ORDER BY M1.article_id ASC
    </select>

</mapper>