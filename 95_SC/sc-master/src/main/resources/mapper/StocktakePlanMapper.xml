<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.com.bbut.iy.itemmaster.dao.StocktakePlanMapper" >

    <resultMap id="BaseResultMap" type="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0100DTO">
        <result column="pi_date" property="piDate"></result>
        <result column="pi_cd" property="piCd"></result>
        <result column="pi_start_time" property="piStartTime"></result>
        <result column="pi_end_time" property="piEndTime"></result>
        <result column="store_cd" property="storeCd"></result>
        <result column="store_name" property="storeName"></result>
        <result column="pi_status" property="piStatus"></result>
        <result column="pi_type" property="piType"></result>
        <result column="pi_status_code" property="piStatusCode"></result>
        <result column="pi_type_code" property="piTypeCode"></result>
        <result column="pi_method" property="piMethod"></result>
        <result column="review_status" property="reviewStatus"></result>
        <result column="review_sts_name" property="reviewStsName"></result>
        <result column="remarks" property="remarks"></result>
        <result column="create_user_id" property="createUserId"></result>
        <result column="create_ymd" property="createYmd"></result>
        <result column="update_user_id" property="updateUserId"></result>
        <result column="export_flg" property="exportFlg"></result>
    </resultMap>

    <resultMap id="Pi0110ResultMap" type="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0110DTO">
        <result column="pi_date" property="piDate"></result>
        <result column="pi_cd" property="piCd"></result>
        <result column="pma_cd" property="pmaCd"></result>
        <result column="pma_name" property="pmaName"></result>
    </resultMap>

    <resultMap id="BaseItemResult" type="cn.com.bbut.iy.itemmaster.dto.pi0100.StocktakeItemDTO">
        <result column="article_id" property="articleId"></result>
        <result column="article_name" property="articleName"></result>
        <result column="barcode" property="barcode"></result>
        <result column="sales_unit_id" property="uom"></result>
        <result column="spec" property="spec"></result>
        <result column="real_time_qty" property="realTimeQty"></result>
        <result column="sale_qty_total" property="saleQtyTotal"></result>
        <result column="customer_return_qty_total" property="customerReturnQtyTotal"></result>
        <result column="scrap_qty" property="scrapQty"></result>
        <result column="allocation_qty_reduce" property="allocationQtyReduce"></result>
        <result column="allocation_qty_add" property="allocationQtyAdd"></result>
        <result column="receive_total_qty" property="receiveTotalQty"></result>
        <result column="store_return_qty" property="storeReturnQty"></result>
        <result column="converter" property="converter"></result>
    </resultMap>

	<insert id="insertInventoryToTemp">
		drop table if exists ${tableName};
		create temp table ${tableName} as
		select ma1100.article_id from pi0110,ma1100 where
		pi_cd=#{param.piCd}
		and pi_date = #{param.piDate}
		and pi0110.pma_cd = ma1100.pma_cd
		and inventory_item = '1'
	</insert>

    <select id="getInventoryData" resultType="map">
		SELECT
			a.article_id,
			sum(a.sale_qty) as sale_qty,
			sum(a.receive_qty) as receive_qty,
			sum(a.trans_in_qty) as trans_in_qty,
			sum(a.trans_out_qty) as trans_out_qty,
			sum(a.return_qty) as return_qty,
			sum(a.item_trans_out_qty) as item_trans_out_qty,
			sum(a.item_trans_in_qty) as item_trans_in_qty,
			sum(a.write_off_qty) as write_off_qty,
			sum(a.receive_corr_qty) as receive_corr_qty,
			sum(a.return_corr_qty) as return_corr_qty,
			sum(a.positive_adjust_qty) as positive_adjust_qty,
			sum(a.negative_adjust_qty) as negative_adjust_qty
		FROM (
			SELECT
				coalesce(e.child_article_id,a.article_id) as article_id,
				sum(case a.ctype when 'sale' then a.qty else 0 end)*coalesce(e.quantity,1) as sale_qty,
				sum(case a.ctype when 'receive' then a.qty else 0 end)*coalesce(e.quantity,1) as receive_qty,
				sum(case a.ctype when 'trans_in' then a.qty else 0 end)*coalesce(e.quantity,1) as trans_in_qty,
				sum(case a.ctype when 'trans_out' then a.qty else 0 end)*coalesce(e.quantity,1) as trans_out_qty,
				sum(case a.ctype when 'return' then a.qty else 0 end)*coalesce(e.quantity,1) as return_qty,
				sum(case a.ctype when 'item_trans_out' then a.qty else 0 end)*coalesce(e.quantity,1) as item_trans_out_qty,
				sum(case a.ctype when 'item_trans_in' then a.qty else 0 end)*coalesce(e.quantity,1) as item_trans_in_qty,
				sum(case a.ctype when 'write_off' then a.qty else 0 end)*coalesce(e.quantity,1) as write_off_qty,
				sum(case a.ctype when 'receive_corr' then a.qty else 0 end)*coalesce(e.quantity,1) as receive_corr_qty,
				sum(case a.ctype when 'return_corr' then a.qty else 0 end)*coalesce(e.quantity,1) as return_corr_qty,
				sum(case a.ctype when 'positive_adjustment' then a.qty else 0 end)*coalesce(e.quantity,1) as positive_adjust_qty,
				sum(case a.ctype when 'negative_adjustment' then a.qty else 0 end)*coalesce(e.quantity,1) as negative_adjust_qty
			FROM
			(
			SELECT DISTINCT d.tran_serial_no::VARCHAR as transid, 'sale' as ctype, b.article_id, d.sale_qty as qty
			FROM ${tableName} b, sa0020 d
			WHERE
				b.article_id = d.article_id
				AND d.store_cd = #{param.storeCd}
				AND d.detail_type = 's'
				AND to_char(sale_date,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}

			UNION ALL

			SELECT DISTINCT d.receive_id as transid, 'receive' as ctype, b.article_id, COALESCE(d.receive_qty,0) AS qty
			FROM ${tableName} b, od0000_t c, od0010_t d, t_audit_tab e
			WHERE
				c.store_cd = #{param.storeCd}
				AND c.receive_id = d.receive_id
				AND b.article_id = d.article_id
				AND c.receive_id = e.record_cd
				AND c.store_cd = e.store_cd
				AND e.c_enable = '1'
				AND e.sub_no != 0
				AND mod(e.c_auditstatus,10) = 9
				AND to_char(e.audit_time,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}

			UNION ALL

			SELECT DISTINCT c.voucher_no as transid, 'trans_in' as ctype, b.article_id, COALESCE(c.qty1,0) AS qty
			FROM ${tableName} b, sk0020 c, t_audit_tab e
			WHERE
				c.store_cd = #{param.storeCd}
				AND c.voucher_type = '501'
				AND b.article_id = c.article_id
				AND c.voucher_no = e.record_cd
				AND c.store_cd = e.store_cd
				AND e.c_enable = '1'
				AND e.sub_no != 0
				AND mod(e.c_auditstatus,10) = 9
				AND to_char(e.audit_time,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}

			UNION ALL

			SELECT DISTINCT c.voucher_no as transid, 'trans_out' as ctype, b.article_id, COALESCE(c.qty2,0) AS qty
			FROM ${tableName} b, sk0020 c, t_audit_tab e
			WHERE
				c.store_cd = #{param.storeCd}
				AND c.voucher_type = '502'
				AND b.article_id = c.article_id
				AND c.voucher_no = e.record_cd
				AND c.store_cd = e.store_cd
				AND e.c_enable = '1'
				AND e.sub_no != 0
				AND mod(e.c_auditstatus,10) = 9
				AND to_char(e.audit_time,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}

			UNION ALL

			SELECT DISTINCT c.order_id as transid, 'return' as ctype, b.article_id, COALESCE(c.receive_qty,0) AS qty
			FROM ${tableName} b, od0010 c, t_audit_tab e
			WHERE
				c.store_cd = #{param.storeCd}
				AND left(c.order_id,3) IN ('RRS','RRD')
				AND b.article_id = c.article_id
				AND c.order_id = e.record_cd
				AND c.store_cd = e.store_cd
				AND e.c_enable = '1'
				AND e.sub_no != 0
				AND mod(e.c_auditstatus,10) = 9
				AND to_char(e.audit_time,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}

			UNION ALL

			SELECT DISTINCT c.voucher_no as transid, 'item_trans_out' as ctype, b.article_id, ABS(COALESCE(c.qty1,0)) AS qty
			FROM ${tableName} b, sk0020 c, t_audit_tab e
			WHERE
				c.store_cd = #{param.storeCd}
				AND c.voucher_type = '602'
				AND b.article_id = c.article_id
				AND c.voucher_no = e.record_cd
				AND c.store_cd = e.store_cd
				AND e.c_enable = '1'
				AND e.sub_no != 0
				AND mod(e.c_auditstatus,10) = 9
				AND to_char(e.audit_time,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}

			UNION ALL

			SELECT DISTINCT c.voucher_no as transid, 'item_trans_in' as ctype, b.article_id, ABS(COALESCE(c.qty1,0)) AS qty
			FROM ${tableName} b, sk0020 c, t_audit_tab e
			WHERE
				c.store_cd = #{param.storeCd}
				AND c.voucher_type = '601'
				AND b.article_id = c.article_id
				AND c.voucher_no = e.record_cd
				AND c.store_cd = e.store_cd
				AND e.c_enable = '1'
				AND e.sub_no != 0
				AND mod(e.c_auditstatus,10) = 9
				AND to_char(e.audit_time,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}

			UNION ALL

			SELECT DISTINCT c.voucher_no as transid, 'write_off' as ctype, b.article_id, ABS(COALESCE(c.qty1,0)) AS qty
			FROM ${tableName} b, sk0020 c, t_audit_tab e
			WHERE
				c.store_cd = #{param.storeCd}
				AND c.voucher_type = '603'
				AND b.article_id = c.article_id
				AND c.voucher_no = e.record_cd
				AND c.store_cd = e.store_cd
				AND e.c_enable = '1'
				AND e.sub_no != 0
				AND mod(e.c_auditstatus,10) = 9
				AND to_char(e.audit_time,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}

            UNION ALL

			SELECT DISTINCT c.voucher_no as transid, 'positive_adjustment' as ctype, b.article_id, ABS(COALESCE(c.qty1,0)) AS qty
			FROM ${tableName} b, sk0020 c, t_audit_tab e
			WHERE
				c.store_cd = #{param.storeCd}
				AND c.voucher_type = '604'
				AND b.article_id = c.article_id
				AND c.voucher_no = e.record_cd
				AND c.store_cd = e.store_cd
				AND e.c_enable = '1'
				AND e.sub_no != 0
				AND mod(e.c_auditstatus,10) = 9
				and COALESCE(c.qty1,0) > 0
				AND to_char(e.audit_time,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}

            UNION ALL

			SELECT DISTINCT c.voucher_no as transid, 'negative_adjustment' as ctype, b.article_id, ABS(COALESCE(c.qty1,0)) AS qty
			FROM ${tableName} b, sk0020 c, t_audit_tab e
			WHERE
				c.store_cd = #{param.storeCd}
				AND c.voucher_type = '604'
				AND b.article_id = c.article_id
				AND c.voucher_no = e.record_cd
				AND c.store_cd = e.store_cd
				AND e.c_enable = '1'
				AND e.sub_no != 0
				AND mod(e.c_auditstatus,10) = 9
				<![CDATA[
				and COALESCE(c.qty1,0) < 0
				]]>
				AND to_char(e.audit_time,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}

			UNION ALL

			SELECT DISTINCT c.order_id as transid, 'receive_corr' AS ctype, b.article_id, COALESCE ( C.correction_difference, 0 ) AS qty
			FROM ${tableName} b, od0010 C, od0000 d, t_audit_tab e
			WHERE
				C.store_cd = #{param.storeCd}
				AND c.order_id = d.order_id
				AND c.store_cd = d.store_cd
				AND d.order_type = '07'
				AND b.article_id = C.article_id
				AND C.order_id = e.record_cd
				AND C.store_cd = e.store_cd
				AND e.c_enable = '1'
				AND e.sub_no != 0
				AND MOD ( e.c_auditstatus, 10 ) = 9
				AND to_char(e.audit_time,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}

			UNION ALL

			SELECT DISTINCT c.order_id as transid, 'return_corr' AS ctype, b.article_id, COALESCE ( C.correction_difference, 0 ) AS qty
			FROM ${tableName} b, od0010 C, od0000 d, t_audit_tab e
			WHERE
				C.store_cd = #{param.storeCd}
				AND c.order_id = d.order_id
				AND c.store_cd = d.store_cd
				AND d.order_type = '08'
				AND b.article_id = C.article_id
				AND C.order_id = e.record_cd
				AND C.store_cd = e.store_cd
				AND e.c_enable = '1'
				AND e.sub_no != 0
				AND MOD ( e.c_auditstatus, 10 ) = 9
				AND to_char(e.audit_time,'YYYYMMDDHH24MISS') BETWEEN #{param.piDate}||'060000' AND #{param.piDate}||#{param.startTime}
			) a
			left join (
				select
					b.parent_article_id,
					b.effective_start_date
				from
					ma1200 a,
					ma1210 b
				where
					(SELECT sp_value FROM cm9060 WHERE sp_id = '0000') between a.effective_start_date and a.effective_end_date
					and a.parent_article_id = b.parent_article_id
					and a.effective_start_date = b.effective_start_date
					and a.review_status = 10
				group by
					b.parent_article_id,b.effective_start_date
				having count(child_article_id)=1
				order by b.parent_article_id
				) d on a.article_id = d.parent_article_id
			left join ma1210 e on e.parent_article_id = d.parent_article_id
			and e.effective_start_date = d.effective_start_date
			GROUP BY
				a.article_id,
				e.child_article_id,
				e.quantity
		) a
		GROUP BY a.article_id
	</select>

    <!--设置 超过了 end time 没有submit的 计划为 过期, 根据业务日期为准-->
    <update id="updateStocktakingPlanExpired" parameterType="string">
       UPDATE  PI0100 A SET pi_status = '04'
        WHERE
        <![CDATA[ CONCAT(A.pi_date,A.pi_end_time)  < concat(#{bsDate},to_char(now(),'hh24miss')) ]]>
        AND A.review_status IS NULL
        AND A.pi_status BETWEEN '01' AND '02'
    </update>

    <select id="getPi0125CountByPicd" resultType="int">
        SELECT
            COUNT(p.pi_cd)
        FROM
            pi0125 p
        WHERE
            p.pi_cd = #{piCd}
            AND p.pi_date = #{piDate}
            AND p.store_cd = #{storeCd}
        LIMIT 1;
    </select>

    <delete id="deletePi0125ByPicd">
        DELETE FROM
            pi0125
        WHERE
            pi_cd = #{piCd}
            AND pi_date = #{piDate}
            AND store_cd = #{storeCd}
    </delete>

    <insert id="insertExportItemsToDB">
        INSERT INTO pi0125 (
            pi_cd,
            pi_date,
            store_cd,
            article_id,
            real_time_qty,
            export_time
        ) VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (
            #{piCd,jdbcType=VARCHAR},
            #{piDate,jdbcType=VARCHAR},
            #{storeCd,jdbcType=VARCHAR},
            #{item.articleId,jdbcType=VARCHAR},
            #{item.realTimeQty,jdbcType=VARCHAR},
            #{item.exportTime,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <update id="modifyPI0100ExportTime">
        UPDATE pi0100
        SET export_time = #{exportTime},
            export_flg = '1'
        WHERE
            pi_cd = #{piCd}
            and pi_date = #{piDate}
            and store_cd = #{storeCd}
    </update>

    <update id="modifyPI0100StartTime">
        UPDATE pi0100
        SET pi_start_time = #{startTime}
        WHERE
            pi_cd = #{piCd}
            and pi_date = #{piDate}
            and store_cd = #{storeCd}
    </update>

    <update id="modifyPI0100EndTime">
        UPDATE pi0100
        SET pi_end_time = #{endTime}
        WHERE
            pi_cd = #{piCd}
            and pi_date = #{piDate}
            and store_cd = #{storeCd}
    </update>

    <select id="getAllItemDepartmentByStore" resultType="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0110DTO">
        SELECT DISTINCT
            C.pma_cd,
            C.pma_name
        FROM
            sk0000_today A,
            MA1100 B,
            MA0080 C
        WHERE
            A.store_cd = #{storeCd}
            AND A.effective_date = #{businessDate}
            AND A.article_id = B.article_id
            AND #{businessDate} BETWEEN B.effective_start_date AND B.effective_end_date
            AND B.pma_cd = C.pma_cd
    </select>

    <select id="checkPicd" parameterType="java.lang.String" resultType="int">
        SELECT
            COUNT( P.pi_cd )
        FROM
            PI0100 P
        WHERE
            P.pi_cd = #{piCd};
    </select>

    <update id="updatePI0100" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0100DTO">
        UPDATE pi0100
        SET remarks = #{pi0100.remarks},
        update_user_id = #{pi0100.updateUserId},
        update_ymd = #{pi0100.updateYmd},
        update_hms = #{pi0100.updateHms}
        WHERE
            pi_cd = #{pi0100.piCd}
            and pi_date = #{pi0100.piDate}
    </update>

    <delete id="deletePI0110" parameterType="java.lang.String">
        DELETE FROM pi0110 WHERE pi_cd = #{piCd} and pi_date = #{piDate}
    </delete>

    <select id="getStocktakeParam" resultType="java.util.HashMap">
        SELECT
            c.code_value as codeValue,
            c.code_name as codeName
        FROM
            cm9010 c
        WHERE
            c.code_type = #{type}
            AND c.effective_sts = '10'
        ORDER BY c.code_value ASC
    </select>

    <!--    获取盘点计划明细数据-->
    <select id="getPI0110ByPrimary" resultMap="Pi0110ResultMap">
        SELECT
            p1.pi_cd,
            p1.pi_date,
            p1.pma_cd,
            p1.pma_name
        FROM
            PI0110 P1
        WHERE
            P1.pi_cd = #{piCd}
            AND P1.pi_date = #{piDate}
    </select>

    <!--    获取盘点计划主档数据-->
    <select id="getPI0100ByPrimary" resultMap="BaseResultMap">
        SELECT
            p1.pi_date,
            p1.pi_cd,
            p1.pi_start_time,
            p1.pi_end_time,
            p1.store_cd,
            concat(p1.store_cd,' ',p2.store_name) store_name,
            p1.pi_method,
            p1.pi_status,
            p1.pi_type,
            p1.remarks,
            M1.emp_name AS create_user_id,
            M2.emp_name AS update_user_id,
            p1.review_status,
            p1.export_flg
        FROM
            PI0100 P1
            LEFT JOIN MA4200 M1 ON P1.create_user_id = M1.emp_num_id
            LEFT JOIN MA4200 M2 ON P1.update_user_id = M2.emp_num_id,
            ma1000 p2,
            cm9060 p3
        WHERE
            P1.pi_cd = #{piCd}
            AND P1.pi_date = #{piDate}
            and p3.sp_id = '0000'
            and p1.store_cd = p2.store_cd
    </select>

    <select id="getPmaList" parameterType="int" resultType="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0110DTO">
        SELECT
            m.pma_cd AS pmaCd,
            m.pma_name AS pmaName,
            n.num
        FROM
            ma0080 m,
            (SELECT COUNT(pma_cd) as num FROM MA0080 WHERE effective_sts = '10') n
        WHERE
            m.effective_sts = '10'
        LIMIT ${rows} OFFSET ${limit}
    </select>

    <select id="selectCountByParam" resultType="int" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0100ParamDTO">
        SELECT
        count(p.pi_date)
        FROM
        pi0100 p LEFT JOIN MA4200 oper ON oper.emp_num_id = p.create_user_id
        left join pi0105 on p.pi_cd = pi0105.pi_cd,
        ma1000 p1,
        cm9060 p2,
        (SELECT c.code_value,c.code_name FROM CM9010 C WHERE C.code_type = '00510' AND C.effective_sts = '10') C1,
        (SELECT c.code_value,c.code_name FROM CM9010 C WHERE C.code_type = '00530' AND C.effective_sts = '10') C2
        <where>
            p2.sp_id = '0000'
            and p.store_cd = p1.store_cd
            and p.pi_status = c2.code_value
            and p.pi_type = c1.code_value
            AND P.pi_account_flg = '0'
            AND P.pi_first_finish_flg = '0'
            AND P.pi_commit_flg = '0'
            and P.store_cd IN
            <foreach item="store" index="index" collection="pi0100Param.stores"
                     open="(" separator="," close=")">
                #{store,jdbcType=VARCHAR}
            </foreach>
            <if test="pi0100Param.piCd != null and pi0100Param.piCd != ''">
                AND lower(p.pi_cd) like lower(CONCAT('%',#{pi0100Param.piCd},'%'))
            </if>
            <if test="pi0100Param.piStatus != null and pi0100Param.piStatus != ''">
                and P.pi_status = #{pi0100Param.piStatus}
            </if>
            <if test="pi0100Param.reviewStatus != null and pi0100Param.reviewStatus != ''">
                and pi0105.review_status = cast(#{pi0100Param.reviewStatus} as numeric)
            </if>
            <if test="pi0100Param.piStartDate!=null and pi0100Param.piStartDate!='' and pi0100Param.piEndDate!=null and pi0100Param.piEndDate!=''">
                and P.pi_date BETWEEN #{pi0100Param.piStartDate} AND #{pi0100Param.piEndDate}
            </if>
        </where>
    </select>

    <select id="search" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0100ParamDTO" resultMap="BaseResultMap">
        SELECT
        p.pi_date,
        p.pi_cd,
        p.pi_start_time,
        p.pi_end_time,
        p1.store_cd,
        p1.store_name,
        p.pi_status as pi_status_code,
        p.pi_type as pi_type_code,
        c2.code_name as pi_status,
        c1.code_name as pi_type,
        pi0105.review_status,
        T2.code_name AS review_sts_name,
        p.remarks,
        p.export_flg,
        oper.emp_name as create_user_id,
        CONCAT(P.create_ymd,P.create_hms) as create_ymd
        FROM
        pi0100 p LEFT JOIN MA4200 oper ON oper.emp_num_id = p.create_user_id
        left join pi0105 on p.pi_cd = pi0105.pi_cd
        LEFT JOIN(
        SELECT code_value,code_name FROM cm9010 WHERE code_type = '00430'
        ) T2 ON CAST(pi0105.review_status AS VARCHAR) = T2.code_value,
        ma1000 p1,
        cm9060 p2,
        (SELECT c.code_value,c.code_name FROM CM9010 C WHERE C.code_type = '00510' AND C.effective_sts = '10') C1,
        (SELECT c.code_value,c.code_name FROM CM9010 C WHERE C.code_type = '00530' AND C.effective_sts = '10') C2
        <where>
            p2.sp_id = '0000'
            and p.store_cd = p1.store_cd
            and p.pi_status = c2.code_value
            and p.pi_type = c1.code_value
            AND P.pi_account_flg = '0'
            AND P.pi_first_finish_flg = '0'
            AND P.pi_commit_flg = '0'
            and P.store_cd IN
            <foreach item="store" index="index" collection="pi0100Param.stores"
                     open="(" separator="," close=")">
                #{store,jdbcType=VARCHAR}
            </foreach>
            <if test="pi0100Param.piCd != null and pi0100Param.piCd != ''">
                AND lower(p.pi_cd) like lower(CONCAT('%',#{pi0100Param.piCd},'%'))
            </if>
            <if test="pi0100Param.piStatus != null and pi0100Param.piStatus != ''">
                and P.pi_status = #{pi0100Param.piStatus}
            </if>
            <if test="pi0100Param.reviewStatus != null and pi0100Param.reviewStatus != ''">
                and pi0105.review_status = cast(#{pi0100Param.reviewStatus} as numeric)
            </if>
            <if test="pi0100Param.piStartDate!=null and pi0100Param.piStartDate!='' and pi0100Param.piEndDate!=null and pi0100Param.piEndDate!=''">
                and P.pi_date BETWEEN #{pi0100Param.piStartDate} AND #{pi0100Param.piEndDate}
            </if>
        </where>
        ORDER BY P.pi_date DESC
        <if test="pi0100Param.flg">
            LIMIT ${pi0100Param.rows} OFFSET ${pi0100Param.limitStart}
        </if>
    </select>

    <insert id="savePI0100" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0100DTO">
    INSERT INTO PI0100 (
        pi_cd,
        pi_date,
        store_cd,
        pi_type,
        pi_method,
        pi_status,
        pi_start_time,
        pi_end_time,
        remarks,
        create_user_id,
        create_ymd,
        create_hms,
        pi_account_flg,
        pi_first_finish_flg,
        pi_commit_flg)
        VALUES
            (
            #{pi0100.piCd},
            #{pi0100.piDate},
            #{pi0100.storeCd},
            #{pi0100.piType},
            #{pi0100.piMethod},
            #{pi0100.piStatus},
            #{pi0100.piStartTime},
            #{pi0100.piEndTime},
            #{pi0100.remarks},
            #{pi0100.createUserId},
            #{pi0100.createYmd},
            #{pi0100.createHms},
            '0',
            '0',
            '0'
             )
  </insert>

    <insert id="savePI0110" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0110DTO">
        INSERT INTO PI0110 (
        pi_cd,
        pi_date,
        pma_cd,
        pma_name)
        VALUES
        <foreach collection="pi0110List" item="item" index="index" separator="," >
            (
            #{item.piCd,jdbcType=VARCHAR},
            #{item.piDate,jdbcType=VARCHAR},
            #{item.pmaCd,jdbcType=VARCHAR},
            #{item.pmaName,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <select id="queryExport" resultMap="BaseItemResult">
    SELECT DISTINCT
        B.article_id,
        B.article_name,
        D.barcode,
        B.spec,
        B.sales_unit_id,
       cast(COALESCE(ma12.quantity,1) as VARCHAR) converter
    FROM
        PI0110 A,
        MA1100 B
        left join
				(SELECT distinct
					ma1200.parent_article_id,ma1210.quantity
				from ma1200,ma1210
				where ma1200.parent_article_id=ma1210.parent_article_id
				and  #{piDate} BETWEEN ma1200.effective_start_date and ma1200.effective_end_date
				and ma1200.effective_start_date = ma1210.effective_start_date
				and ma1200.parent_article_id in (select a.parent_article_id from (SELECT count(ma1210.*) num,ma1210.parent_article_id from ma1210,ma1200
				where ma1210.parent_article_id = ma1200.parent_article_id  GROUP BY ma1210.parent_article_id) a where num = 1)
				union
				SELECT distinct
					ma1200.parent_article_id,1.000
				from ma1200,ma1210
				where ma1200.parent_article_id=ma1210.parent_article_id
				and  #{piDate} BETWEEN ma1200.effective_start_date and ma1200.effective_end_date
				and ma1200.effective_start_date = ma1210.effective_start_date
				and ma1200.parent_article_id in (select a.parent_article_id from (SELECT count(ma1210.*) num,ma1210.parent_article_id from ma1210,ma1200
				where ma1210.parent_article_id = ma1200.parent_article_id  GROUP BY ma1210.parent_article_id) a where num > 1)
				) ma12
        on B.article_id = ma12.parent_article_id,
        MA1140 D,
        CM9060 F,
        MA1130 G
    WHERE
        A.pi_cd = #{piCd}
        AND A.pi_date = #{piDate}
        AND F.sp_id = '0000'
        AND A.pma_cd = B.pma_cd
        AND F.sp_value BETWEEN B.effective_start_date AND B.effective_end_date
        AND B.article_id = D.article_id
        AND F.sp_value BETWEEN D.effective_start_date AND D.effective_end_date
        /*and B.article_id not in
            (select article_id from pi0126)*/
        and (D.barcode is not null and D.barcode != '')
        and (B.sales_unit_id is not null and B.sales_unit_id != '')
        and B.article_id = G.article_id
        AND B.effective_start_date = G.effective_start_date
        AND G.structure_cd = (SELECT ma2.admin_structure_cd FROM ma0020 ma2 WHERE ma2.structure_cd =
            (SELECT ma1.admin_structure_cd FROM ma0020 ma1 WHERE ma1.structure_cd = #{storeCd,jdbcType=VARCHAR}))
            AND G.sale_inactive = '0'
</select>

    <select id="getPrintData" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0100ParamDTO" resultMap="BaseResultMap">
        SELECT
        p.pi_date,
        p.pi_cd,
        p.pi_start_time,
        p.pi_end_time,
        p1.store_cd,
        p1.store_name,
        p.pi_status as pi_status_code,
        p.pi_type as pi_type_code,
        c2.code_name as pi_status,
        c1.code_name as pi_type,
        p.review_status,
        p.remarks,
        p.export_flg,
        oper.emp_name as create_user_id,
        CONCAT(P.create_ymd,P.create_hms) as create_ymd
        FROM
        pi0100 p LEFT JOIN MA4200 oper ON oper.emp_num_id = p.create_user_id,
        ma1000 p1,
        cm9060 p2,
        (SELECT c.code_value,c.code_name FROM CM9010 C WHERE C.code_type = '00510' AND C.effective_sts = '10') C1,
        (SELECT c.code_value,c.code_name FROM CM9010 C WHERE C.code_type = '00530' AND C.effective_sts = '10') C2
        <where>
            p2.sp_id = '0000'
            and p.store_cd = p1.store_cd
            and p.pi_status = c2.code_value
            and p.pi_type = c1.code_value
            AND P.pi_account_flg = '0'
            AND P.pi_first_finish_flg = '0'
            AND P.pi_commit_flg = '0'
            and P.store_cd IN
            <foreach item="store" index="index" collection="pi0100Param.stores"
                     open="(" separator="," close=")">
                #{store,jdbcType=VARCHAR}
            </foreach>
            <if test="pi0100Param.piCd != null and pi0100Param.piCd != ''">
                AND lower(p.pi_cd) like lower(CONCAT('%',#{pi0100Param.piCd},'%'))
            </if>
            <if test="pi0100Param.piStatus != null and pi0100Param.piStatus != ''">
                and P.pi_status = #{pi0100Param.piStatus}
            </if>
            <if test="pi0100Param.piStartDate!=null and pi0100Param.piStartDate!='' and pi0100Param.piEndDate!=null and pi0100Param.piEndDate!=''">
                and P.pi_date BETWEEN #{pi0100Param.piStartDate} AND #{pi0100Param.piEndDate}
            </if>
        </where>
        ORDER BY P.pi_date DESC
    </select>

    <insert id="insertAudit">
        insert into pi0105(pi_cd) values (#{piCd,jdbcType=VARCHAR})
        ON CONFLICT (pi_cd) DO NOTHING;
    </insert>

    <update id="updateAudit" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.PI0100DTO">
        update pi0105 set n_reviewid = 28,review_status = 10,update_user_id = #{pi0100.updateUserId,jdbcType=VARCHAR},
        update_ymd = #{pi0100.updateYmd,jdbcType=VARCHAR},update_hms = #{pi0100.updateHms,jdbcType=VARCHAR}
        where pi_cd = #{pi0100.piCd,jdbcType=VARCHAR}
    </update>

    <select id="getDayOfEnd" resultType="Integer">
        SELECT pi_date FROM pi0100
        WHERE
            pi_account_flg = '0'
            AND pi_first_finish_flg = '0'
            AND pi_commit_flg = '0'
            AND store_cd = #{storeCd,jdbcType=VARCHAR}
            AND pi_date > #{piDate,jdbcType=VARCHAR}
        ORDER BY
            pi_date ASC
    </select>

    <update id="createTempTable">
        DROP TABLE IF EXISTS ${tableName};
        create table ${tableName} (
            article_id varchar(255),
            real_time_qty numeric(19,0),
            export_time varchar(255)
        )
    </update>

    <insert id="saveToTempTable" parameterType="cn.com.bbut.iy.itemmaster.dto.pi0100.StocktakeItemDTO">
        INSERT INTO ${tableName}
        VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (
            #{item.articleId,jdbcType=VARCHAR},
            #{item.realTimeQty},
            #{item.exportTime,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <select id="getstockList" resultType="cn.com.bbut.iy.itemmaster.dto.pi0100.StocktakeItemDTO">
        select t.article_id,t.real_time_qty,t.export_time
        from ${tableName} t
        join ma1100 ma1
		on t.article_id = ma1.article_id
		where
		t.article_id not in (select article_id from pi0126)
		and (select sp_value from cm9060 where sp_id = '0000')
		    between ma1.effective_start_date and ma1.effective_end_date
		and ma1.inventory_item = '1'
		AND ma1.cost_item = '0'
    </select>
</mapper>